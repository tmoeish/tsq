// Code generated by tsq-dev. DO NOT EDIT.
package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/juju/errors"
	"github.com/tmoeish/tsq"
	"gopkg.in/gorp.v2"

	null "gopkg.in/nullbio/null.v6"
)

// =============================================================================
// Table Interface Implementation
// =============================================================================

func init() {
	tsq.RegisterTable(TableOrg)
}

// TableOrg implements the tsq.Table interface for Org.
var TableOrg tsq.Table = Org{}

// TableOrgCols is the list of columns for Org table.
var TableOrgCols = []tsq.Column{
	Org_CT,
	Org_ID,
	Org_Name,
}

// Column definitions for Org table.
var (
	Org_CT = tsq.NewCol[null.Time](TableOrg, "ct", "ct", func(t any) any {
		return &t.(*Org).CT
	})
	Org_ID = tsq.NewCol[int64](TableOrg, "id", "id", func(t any) any {
		return &t.(*Org).ID
	})
	Org_Name = tsq.NewCol[string](TableOrg, "name", "Name", func(t any) any {
		return &t.(*Org).Name
	})
)

// Init initializes the Org table in the database.
func (o Org) Init(db *gorp.DbMap, upsertIndexies bool) error {
	db.AddTableWithName(o, "org").SetKeys(true, "ID")

	if !upsertIndexies {
		return nil
	}

	// Upsert Ux list
	if err := tsq.UpsertIndex(db, "org", true, "UxName", []string{`name`}); err != nil {
		return errors.Annotatef(err, "upsert ux %s for %s", "UxName", o.Table())
	}

	return nil
}

// Table returns the database table name for Org.
func (o Org) Table() string { return "org" }

// KwList returns columns that support keyword search for Org.
func (o Org) KwList() []tsq.Column {
	return []tsq.Column{}
}

// =============================================================================
// Query by Primary Key
// =============================================================================
var getOrgByIDQuery = tsq.
	Select(TableOrgCols...).
	Where(
		Org_ID.EQVar(),
	).
	MustBuild()

// GetOrgByID retrieves a Org record by its ID.
// Returns (nil, nil) if the record is not found.
func GetOrgByID(
	ctx context.Context,
	db gorp.SqlExecutor,
	id int64,
) (*Org, error) {
	row := &Org{}
	return row, tsq.Trace(ctx, func(ctx context.Context) error {
		err := getOrgByIDQuery.Load(ctx, db, row, id)
		switch errors.Cause(err) {
		case nil:
			return nil
		case sql.ErrNoRows:
			row = nil
			return nil
		default:
			return errors.Trace(err)
		}
	})
}

// GetOrgByIDOrErr retrieves a Org record by its ID.
// Returns (nil, sql.ErrNoRows) if the record is not found.
func GetOrgByIDOrErr(
	ctx context.Context,
	db gorp.SqlExecutor,
	id int64,
) (*Org, error) {
	row := &Org{}
	err := tsq.Trace(ctx, func(ctx context.Context) error {
		return getOrgByIDQuery.Load(
			ctx, db, row, id,
		)
	})
	return row, errors.Trace(err)
}

// ListOrgByIDIn retrieves multiple Org records by a set of ID values.
// Records not found are silently ignored.
func ListOrgByIDIn(
	ctx context.Context,
	db gorp.SqlExecutor,
	ids ...int64,
) ([]*Org, error) {
	query := tsq.
		Select(TableOrgCols...).
		Where(Org_ID.In(ids...)).
		MustBuild()

	var list []*Org
	return list, tsq.Trace(ctx, func(ctx context.Context) error {
		var err error
		list, err = tsq.List[Org](
			ctx, db, query,
		)
		if err != nil {
			return errors.Trace(err)
		}
		return nil
	})
}

// ListOrgByIDInOrErr retrieves multiple Org records by a set of ID values.
// Returns an error if any of the specified records are not found.
func ListOrgByIDInOrErr(
	ctx context.Context,
	db gorp.SqlExecutor,
	ids ...int64,
) ([]*Org, error) {
	idSet := map[int64]bool{}
	for _, i := range ids {
		idSet[i] = true
	}
	query := tsq.
		Select(TableOrgCols...).
		Where(Org_ID.In(ids...)).
		MustBuild()
	var list []*Org
	return list, tsq.Trace(ctx, func(ctx context.Context) error {
		var err error
		list, err = tsq.List[Org](
			ctx, db, query,
		)
		if err != nil {
			return errors.Trace(err)
		}

		for _, i := range list {
			delete(idSet, i.ID)
		}
		if len(idSet) > 0 {
			var missings []int64
			for i := range idSet {
				missings = append(missings, i)
			}
			return errors.Errorf("Org(s) not found: %v", missings)
		}
		return nil
	})
}

// =============================================================================
// CRUD Operations
// =============================================================================

// Insert inserts a new Org record into the database.
// Automatically sets creation and modification timestamps if configured.
func (o *Org) Insert(
	ctx context.Context,
	db gorp.SqlExecutor,
) error {
	return tsq.Trace(ctx, func(ctx context.Context) error {
		o.CT = null.TimeFrom(time.Now())
		err := db.Insert(o)
		if err != nil {
			return errors.Annotate(err, tsq.PrettyJSON(o))
		}

		return nil
	})
}

// Update updates an existing Org record in the database.
// Automatically updates the modification timestamp if configured.
func (o *Org) Update(
	ctx context.Context,
	db gorp.SqlExecutor,
) error {
	return tsq.Trace(ctx, func(ctx context.Context) error {
		_, err := db.Update(o)
		if err != nil {
			return errors.Annotate(err, tsq.PrettyJSON(o))
		}

		return nil
	})
}

// Delete permanently removes a Org record from the database.
func (o *Org) Delete(
	ctx context.Context,
	db gorp.SqlExecutor,
) error {
	return tsq.Trace(ctx, func(ctx context.Context) error {
		_, err := db.Delete(o)
		if err != nil {
			return errors.Annotate(err, tsq.PrettyJSON(o))
		}

		return nil
	})
}

// ListOrgByQuery executes a custom query to retrieve Org records.
func ListOrgByQuery(
	ctx context.Context,
	tx gorp.SqlExecutor,
	qb *tsq.Query,
	args ...any,
) ([]*Org, error) {
	var data []*Org
	return data, tsq.Trace(ctx, func(ctx context.Context) error {
		var err error
		data, err = tsq.List[Org](ctx, tx, qb, args...)
		return errors.Trace(err)
	})
}

// PageOrgByQuery executes a custom query with pagination to retrieve Org records.
func PageOrgByQuery(
	ctx context.Context,
	tx gorp.SqlExecutor,
	page *tsq.PageReq,
	qb *tsq.Query,
	args ...any,
) (*tsq.PageResp[Org], error) {
	var rs *tsq.PageResp[Org]
	return rs, tsq.Trace(ctx, func(ctx context.Context) error {
		var err error
		rs, err = tsq.Page[Org](
			ctx, tx, page, qb, args...,
		)
		return errors.Trace(err)
	})
}

// =============================================================================
// List All Records
// =============================================================================
// listOrgQuery is the base query for retrieving all Org records.
var listOrgQuery = tsq.
	Select(TableOrgCols...).
	KwSearch(TableOrg.KwList()...).
	MustBuild()

// CountOrg returns the total count of Org records.
func CountOrg(
	ctx context.Context,
	tx gorp.SqlExecutor,
) (int, error) {
	query := listOrgQuery

	var rs int
	return rs, tsq.Trace(ctx, func(ctx context.Context) error {
		var err error
		rs, err = query.Count(ctx, tx)
		return errors.Trace(err)
	})
}

// ListOrg retrieves all Org records from the database.
func ListOrg(
	ctx context.Context,
	tx gorp.SqlExecutor,
) ([]*Org, error) {
	query := listOrgQuery

	var data []*Org
	return data, tsq.Trace(ctx, func(ctx context.Context) error {
		var err error
		data, err = tsq.List[Org](ctx, tx, query)
		return errors.Trace(err)
	})
}

// PageOrg retrieves Org records with pagination support.
func PageOrg(
	ctx context.Context,
	tx gorp.SqlExecutor,
	page *tsq.PageReq,
) (*tsq.PageResp[Org], error) {
	query := listOrgQuery

	var rs *tsq.PageResp[Org]
	return rs, tsq.Trace(ctx, func(ctx context.Context) error {
		var err error
		rs, err = tsq.Page[Org](
			ctx, tx, page, query,
		)
		return errors.Trace(err)
	})
}

// =============================================================================
// Query by Unique Indexes
// =============================================================================
var getOrgByNameQuery = tsq.
	Select(TableOrgCols...).
	Where(
		Org_Name.EQVar(),
	).
	KwSearch(TableOrg.KwList()...).
	MustBuild()

// GetOrgByName retrieves a Org record by unique index UxName.
// Returns (nil, nil) if the record is not found.
func GetOrgByName(
	ctx context.Context,
	db gorp.SqlExecutor,
	name string,
) (*Org, error) {
	query := getOrgByNameQuery

	row := &Org{}
	return row, tsq.Trace(ctx, func(ctx context.Context) error {
		err := query.Load(ctx, db, row,
			name,
		)
		switch errors.Cause(err) {
		case nil:
			return nil
		case sql.ErrNoRows:
			row = nil
			return nil
		default:
			return errors.Trace(err)
		}
	})
}

// GetOrgByNameOrErr retrieves a Org record by unique index UxName.
// Returns (nil, sql.ErrNoRows) if the record is not found.
func GetOrgByNameOrErr(
	ctx context.Context,
	db gorp.SqlExecutor,
	name string,
) (*Org, error) {
	query := getOrgByNameQuery

	row := &Org{}
	return row, tsq.Trace(ctx, func(ctx context.Context) error {
		return query.Load(ctx, db, row,
			name,
		)
	})
}

// ExistsOrgByName checks whether a Org record exists by unique index UxName.
func ExistsOrgByName(
	ctx context.Context,
	db gorp.SqlExecutor,
	name string,
) (bool, error) {
	query := getOrgByNameQuery

	var rs bool
	return rs, tsq.Trace(ctx, func(ctx context.Context) error {
		var err error
		rs, err = query.Exists(ctx, db,
			name,
		)
		return errors.Trace(err)
	})
}
