// Code generated by tsq-dev. DO NOT EDIT.
package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/juju/errors"
	"github.com/tmoeish/tsq"
	"gopkg.in/gorp.v2"

	null "gopkg.in/nullbio/null.v6"
)

// =============================================================================
// Table Interface Implementation
// =============================================================================

func init() {
	tsq.RegisterTable(TableCategory)
}

// TableCategory implements the tsq.Table interface for Category.
var TableCategory tsq.Table = Category{}

// TableCategoryCols is the list of columns for Category table.
var TableCategoryCols = []tsq.Column{
	Category_CT,
	Category_Description,
	Category_ID,
	Category_Name,
	Category_Type,
}

// Column definitions for Category table.
var (
	Category_CT = tsq.NewCol[null.Time](TableCategory, "ct", "ct", func(t any) any {
		return &t.(*Category).CT
	})
	Category_Description = tsq.NewCol[string](TableCategory, "description", "description", func(t any) any {
		return &t.(*Category).Description
	})
	Category_ID = tsq.NewCol[int64](TableCategory, "id", "id", func(t any) any {
		return &t.(*Category).ID
	})
	Category_Name = tsq.NewCol[string](TableCategory, "name", "name", func(t any) any {
		return &t.(*Category).Name
	})
	Category_Type = tsq.NewCol[CategoryType](TableCategory, "type", "type", func(t any) any {
		return &t.(*Category).Type
	})
)

// Init initializes the Category table in the database.
func (c Category) Init(db *gorp.DbMap, upsertIndexies bool) error {
	db.AddTableWithName(c, "category").SetKeys(true, "ID")

	if !upsertIndexies {
		return nil
	}

	// Upsert Ux list
	if err := tsq.UpsertIndex(db, "category", true, "ux_name", []string{`name`}); err != nil {
		return errors.Annotatef(err, "upsert ux %s for %s", "ux_name", c.Table())
	}

	return nil
}

// Table returns the database table name for Category.
func (c Category) Table() string { return "category" }

// KwList returns columns that support keyword search for Category.
func (c Category) KwList() []tsq.Column {
	return []tsq.Column{
		Category_Name,
		Category_Description,
	}
}

// =============================================================================
// Query by Primary Key
// =============================================================================
var getCategoryByIDQuery = tsq.
	Select(TableCategoryCols...).
	Where(
		Category_ID.EQVar(),
	).
	MustBuild()

// GetCategoryByID retrieves a Category record by its ID.
// Returns (nil, nil) if the record is not found.
func GetCategoryByID(
	ctx context.Context,
	db gorp.SqlExecutor,
	id int64,
) (*Category, error) {
	row := &Category{}
	return row, tsq.Trace(ctx, func(ctx context.Context) error {
		err := getCategoryByIDQuery.Load(ctx, db, row, id)
		switch errors.Cause(err) {
		case nil:
			return nil
		case sql.ErrNoRows:
			row = nil
			return nil
		default:
			return errors.Trace(err)
		}
	})
}

// GetCategoryByIDOrErr retrieves a Category record by its ID.
// Returns (nil, sql.ErrNoRows) if the record is not found.
func GetCategoryByIDOrErr(
	ctx context.Context,
	db gorp.SqlExecutor,
	id int64,
) (*Category, error) {
	row := &Category{}
	err := tsq.Trace(ctx, func(ctx context.Context) error {
		return getCategoryByIDQuery.Load(
			ctx, db, row, id,
		)
	})
	return row, errors.Trace(err)
}

// ListCategoryByIDIn retrieves multiple Category records by a set of ID values.
// Records not found are silently ignored.
func ListCategoryByIDIn(
	ctx context.Context,
	db gorp.SqlExecutor,
	ids ...int64,
) ([]*Category, error) {
	query := tsq.
		Select(TableCategoryCols...).
		Where(Category_ID.In(ids...)).
		MustBuild()

	var list []*Category
	return list, tsq.Trace(ctx, func(ctx context.Context) error {
		var err error
		list, err = tsq.List[Category](
			ctx, db, query,
		)
		if err != nil {
			return errors.Trace(err)
		}
		return nil
	})
}

// ListCategoryByIDInOrErr retrieves multiple Category records by a set of ID values.
// Returns an error if any of the specified records are not found.
func ListCategoryByIDInOrErr(
	ctx context.Context,
	db gorp.SqlExecutor,
	ids ...int64,
) ([]*Category, error) {
	idSet := map[int64]bool{}
	for _, i := range ids {
		idSet[i] = true
	}
	query := tsq.
		Select(TableCategoryCols...).
		Where(Category_ID.In(ids...)).
		MustBuild()
	var list []*Category
	return list, tsq.Trace(ctx, func(ctx context.Context) error {
		var err error
		list, err = tsq.List[Category](
			ctx, db, query,
		)
		if err != nil {
			return errors.Trace(err)
		}

		for _, i := range list {
			delete(idSet, i.ID)
		}
		if len(idSet) > 0 {
			var missings []int64
			for i := range idSet {
				missings = append(missings, i)
			}
			return errors.Errorf("Category(s) not found: %v", missings)
		}
		return nil
	})
}

// =============================================================================
// CRUD Operations
// =============================================================================

// Insert inserts a new Category record into the database.
// Automatically sets creation and modification timestamps if configured.
func (c *Category) Insert(
	ctx context.Context,
	db gorp.SqlExecutor,
) error {
	return tsq.Trace(ctx, func(ctx context.Context) error {
		c.CT = null.TimeFrom(time.Now())
		err := db.Insert(c)
		if err != nil {
			return errors.Annotate(err, tsq.PrettyJSON(c))
		}

		return nil
	})
}

// Update updates an existing Category record in the database.
// Automatically updates the modification timestamp if configured.
func (c *Category) Update(
	ctx context.Context,
	db gorp.SqlExecutor,
) error {
	return tsq.Trace(ctx, func(ctx context.Context) error {
		_, err := db.Update(c)
		if err != nil {
			return errors.Annotate(err, tsq.PrettyJSON(c))
		}

		return nil
	})
}

// Delete permanently removes a Category record from the database.
func (c *Category) Delete(
	ctx context.Context,
	db gorp.SqlExecutor,
) error {
	return tsq.Trace(ctx, func(ctx context.Context) error {
		_, err := db.Delete(c)
		if err != nil {
			return errors.Annotate(err, tsq.PrettyJSON(c))
		}

		return nil
	})
}

// ListCategoryByQuery executes a custom query to retrieve Category records.
func ListCategoryByQuery(
	ctx context.Context,
	tx gorp.SqlExecutor,
	qb *tsq.Query,
	args ...any,
) ([]*Category, error) {
	var data []*Category
	return data, tsq.Trace(ctx, func(ctx context.Context) error {
		var err error
		data, err = tsq.List[Category](ctx, tx, qb, args...)
		return errors.Trace(err)
	})
}

// PageCategoryByQuery executes a custom query with pagination to retrieve Category records.
func PageCategoryByQuery(
	ctx context.Context,
	tx gorp.SqlExecutor,
	page *tsq.PageReq,
	qb *tsq.Query,
	args ...any,
) (*tsq.PageResp[Category], error) {
	var rs *tsq.PageResp[Category]
	return rs, tsq.Trace(ctx, func(ctx context.Context) error {
		var err error
		rs, err = tsq.Page[Category](
			ctx, tx, page, qb, args...,
		)
		return errors.Trace(err)
	})
}

// =============================================================================
// List All Records
// =============================================================================
// listCategoryQuery is the base query for retrieving all Category records.
var listCategoryQuery = tsq.
	Select(TableCategoryCols...).
	KwSearch(TableCategory.KwList()...).
	MustBuild()

// CountCategory returns the total count of Category records.
func CountCategory(
	ctx context.Context,
	tx gorp.SqlExecutor,
) (int, error) {
	query := listCategoryQuery

	var rs int
	return rs, tsq.Trace(ctx, func(ctx context.Context) error {
		var err error
		rs, err = query.Count(ctx, tx)
		return errors.Trace(err)
	})
}

// ListCategory retrieves all Category records from the database.
func ListCategory(
	ctx context.Context,
	tx gorp.SqlExecutor,
) ([]*Category, error) {
	query := listCategoryQuery

	var data []*Category
	return data, tsq.Trace(ctx, func(ctx context.Context) error {
		var err error
		data, err = tsq.List[Category](ctx, tx, query)
		return errors.Trace(err)
	})
}

// PageCategory retrieves Category records with pagination support.
func PageCategory(
	ctx context.Context,
	tx gorp.SqlExecutor,
	page *tsq.PageReq,
) (*tsq.PageResp[Category], error) {
	query := listCategoryQuery

	var rs *tsq.PageResp[Category]
	return rs, tsq.Trace(ctx, func(ctx context.Context) error {
		var err error
		rs, err = tsq.Page[Category](
			ctx, tx, page, query,
		)
		return errors.Trace(err)
	})
}

// =============================================================================
// Query by Unique Indexes
// =============================================================================
var getCategoryByNameQuery = tsq.
	Select(TableCategoryCols...).
	Where(
		Category_Name.EQVar(),
	).
	KwSearch(TableCategory.KwList()...).
	MustBuild()

// GetCategoryByName retrieves a Category record by unique index ux_name.
// Returns (nil, nil) if the record is not found.
func GetCategoryByName(
	ctx context.Context,
	db gorp.SqlExecutor,
	name string,
) (*Category, error) {
	query := getCategoryByNameQuery

	row := &Category{}
	return row, tsq.Trace(ctx, func(ctx context.Context) error {
		err := query.Load(ctx, db, row,
			name,
		)
		switch errors.Cause(err) {
		case nil:
			return nil
		case sql.ErrNoRows:
			row = nil
			return nil
		default:
			return errors.Trace(err)
		}
	})
}

// GetCategoryByNameOrErr retrieves a Category record by unique index ux_name.
// Returns (nil, sql.ErrNoRows) if the record is not found.
func GetCategoryByNameOrErr(
	ctx context.Context,
	db gorp.SqlExecutor,
	name string,
) (*Category, error) {
	query := getCategoryByNameQuery

	row := &Category{}
	return row, tsq.Trace(ctx, func(ctx context.Context) error {
		return query.Load(ctx, db, row,
			name,
		)
	})
}

// ExistsCategoryByName checks whether a Category record exists by unique index ux_name.
func ExistsCategoryByName(
	ctx context.Context,
	db gorp.SqlExecutor,
	name string,
) (bool, error) {
	query := getCategoryByNameQuery

	var rs bool
	return rs, tsq.Trace(ctx, func(ctx context.Context) error {
		var err error
		rs, err = query.Exists(ctx, db,
			name,
		)
		return errors.Trace(err)
	})
}
